# allow requests for static assets
GET           /assets/*file                                 controllers.Assets.versioned(path="/public", file: Asset)

# redirect all other requests to the SPA page
# ...except API requests with the prefix '/api'
GET           /$p<(?!api).*>                                controllers.FrontController.index(p: String)

# TODO: All API endpoints need to be like '/api/user'.
# Or we could create our own custom router and use it
# for any requests with the prefix '/api'. This might 
# be the better long-term solution.
# see: https://www.playframework.com/documentation/2.6.x/ScalaRouting#the-routes-file-syntax


# ----------------------- USER APIs ----------------------

#
# DbUser
#

# Create a DbUser
POST          /api/user                                     controllers.UserController.createUser()

# Read DbUser by sfuEmail
GET           /api/user/:sfuEmail                           controllers.UserController.retrieveUser(sfuEmail: String)

# Update DbUser by sfuEmail
PUT           /api/user/:sfuEmail                           controllers.UserController.updateUser(sfuEmail: String)

# Delete DbUser by sfuEmail
DELETE        /api/user                                     controllers.UserController.deleteUser()


#
# DbUserShift
#

# Create a UserShift
POST          /api/user/shift                               controllers.UserShiftController.createUserShift()

# Read UserShift by userId
GET           /api/user/shift/:userId                       controllers.UserShiftController.retrieveUserShift(userId: Integer)

# Delete UserShift by userId
DELETE        /api/user/shift                               controllers.UserShiftController.deleteUserShift()


#
# DbShiftName
#

# Create a ShiftName
POST          /api/user/shift/name                          controllers.ShiftNameController.createShiftName()

# Delete ShiftName by shiftName
DELETE        /api/user/shift/name                          controllers.ShiftNameController.deleteShiftName()


#
# DbTeam
#

# Create a DbTeam
POST          /api/team                                     controllers.TeamController.createTeam()

# Delete DbTeam by teamName
DELETE        /api/team                                     controllers.TeamController.deleteTeamByName()


#
# DbShift
#

# List shifts for a specific user
GET           /api/shift/:teamId/:timeStart/:timeEnd        controllers.ShiftController.readUsersAvailableForShift(teamId: Integer, timeStart: Integer, timeEnd: Integer)

# Create a shift
POST          /api/shift                                    controllers.ShiftController.createShift()

# Delete a shift
DELETE        /api/shift                                    controllers.ShiftController.deleteShift()


#
# DbPermission
#

# List permissions
GET           /api/permission                               controllers.PermissionController.listPermission()

# Create a permission
POST          /api/permission                               controllers.PermissionController.createPermission()

# Read DbPermission by permissionId
GET           /api/permission/:permissionId                 controllers.PermissionController.retrievePermission(permissionId: Integer)

# Delete a permission by permissionId
DELETE        /api/permission/:permissionId                 controllers.PermissionController.deletePermission(permissionId: Integer)


#
# DbRole
#

# List roles
GET           /api/role                                     controllers.RoleController.listRole()

# Create a role
POST          /api/role                                     controllers.RoleController.createRole()

# Read DbRole by roleId
GET           /api/role/:roleId                             controllers.RoleController.retrieveRole(roleId: Integer)

# Delete a permission by roleId
DELETE        /api/role/:roleId                             controllers.RoleController.deleteRole(roleId: Integer)