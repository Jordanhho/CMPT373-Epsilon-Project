# allow requests for static assets
GET           /assets/*file                                                      controllers.Assets.versioned(path="/public", file: Asset)

# redirect all other requests to the SPA page
# ...except API requests with the prefix '/api'
GET           /$p<(?!api).*>                                                     controllers.FrontController.index(p: String)

# TODO: All API endpoints need to be like '/api/user'.
# Or we could create our own custom router and use it
# for any requests with the prefix '/api'. This might 
# be the better long-term solution.
# see: https://www.playframework.com/documentation/2.6.x/ScalaRouting#the-routes-file-syntax

# ----------------------- USER APIs ----------------------

#
# DbUser
#

# Create a user
POST          /api/users                                                         controllers.UserController.createUser()

# Read a user by sfuEmail
GET           /api/users/:sfuEmail                                               controllers.UserController.retrieveUser(sfuEmail: String)

# Update a user by sfuEmail
PUT           /api/users/:sfuEmail                                               controllers.UserController.updateUser(sfuEmail: String)

# Delete a user by sfuEmail
DELETE        /api/users/:sfuEmail                                               controllers.UserController.deleteUserBySfuEmail(sfuEmail: String)


#
# DbUserShift
#

# Assign a user to a shift
POST          /api/users/:userId/shifts/:shiftId                                 controllers.UserShiftController.createUserShift()

# Read all shifts assigned to user
GET           /api/users/:userId/shifts                                          controllers.UserShiftController.retrieveUserShift(userId: Integer)

# Unassign all users tied to a shift
DELETE        /api/users/shifts/:shiftId                                         controllers.UserShiftController.deleteUserShifts(shiftId: Integer)


#
# DbUserTeam
#

# List all user-team pairs in the database
GET           /api/users/teams                                                   controllers.UserTeamController.listUserTeams()

# Assign a user to a team
POST          /api/users/:userId/teams/:teamId                                   controllers.UserTeamController.createUserTeam()

# Read a user-team pair by userId and teamId
GET           /api/users/:userId/teams/:teamId                                   controllers.UserTeamController.retrieveUserTeam(userId: Integer, teamId: Integer)

# Delete a user-team pair by userId and teamId
DELETE        /api/users/:userId/teams/:teamId                                   controllers.UserTeamController.deleteUserTeam(userId: Integer, teamId: Integer)


#
# DbShiftName
#

# Create a shift name
POST          /api/shiftnames                                                    controllers.ShiftNameController.createShiftName()

# Delete a shift name by name
DELETE        /api/shiftnames/:name                                              controllers.ShiftNameController.deleteShiftName(name: String)


#
# DbTeam
#

# Create a team
POST          /api/teams                                                         controllers.TeamController.createTeam()

# Read a team by name
GET           /api/teams/:name                                                   controllers.TeamController.retrieveTeam(name: String)

# Update a team by name
PUT           /api/teams/:name                                                   controllers.TeamController.updateTeam(name: String)

# Delete a team by name
DELETE        /api/teams/:name                                                   controllers.TeamController.deleteTeamByName(name: String)


#
# DbShift
#

# List all users within a team that are available for shifts in a time range
GET           /api/users/teams/:teamId/shifts?start=TIMESTART&end=TIMEEND        controllers.ShiftController.readUsersAvailableForShift(teamId: Integer)

# List all shifts in the database
GET           /api/shifts                                                        controllers.ShiftController.readShifts()

# Create a shift
POST          /api/shifts                                                        controllers.ShiftController.createShift()

# Delete a shift by name
DELETE        /api/shifts/:name                                                  controllers.ShiftController.deleteShift(name: String)


#
# DbPermission
#

# List all permissions in the database
GET           /api/permissions                                                   controllers.PermissionController.listPermissions()

# Create a permission
POST          /api/permissions                                                   controllers.PermissionController.createPermission()

# Read a permission by permissionId
GET           /api/permissions/:permissionId                                     controllers.PermissionController.retrievePermission(permissionId: Integer)

# Delete a permission by permissionId
DELETE        /api/permissions/:permissionId                                     controllers.PermissionController.deletePermission(permissionId: Integer)


#
# DbRole
#

# List all roles in the database
GET           /api/roles                                                         controllers.RoleController.listRoles()

# Create a role
POST          /api/roles                                                         controllers.RoleController.createRole()

# Read a role by roleId
GET           /api/roles/:roleId                                                 controllers.RoleController.retrieveRole(roleId: Integer)

# Delete a role by roleId
DELETE        /api/roles/:roleId                                                 controllers.RoleController.deleteRole(roleId: Integer)


#
# DbRolePermission
#

# List all role-permission pairs in the database
GET           /api/roles/permissions                                             controllers.RolePermissionController.listRolePermissions()

# Assign a permission to a role
POST          /api/roles/:roleId/permissions/:permissionId                       controllers.RolePermissionController.createRolePermission()

# TODO: Clarify route paths when identifying role-permission pairs by rolePermissionId
# Read a role-permission pair by rolePermissionId
GET           /api/rolepermissions/:rolePermissionId                             controllers.RolePermissionController.retrieveRolePermission(rolePermissionId: Integer)

# Delete a role-permission pair by rolePermissionId
DELETE        /api/rolepermissions/:rolePermissionId                             controllers.RolePermissionController.deleteRolePermission(rolePermissionId: Integer)


#
# DbOneTimeAvailability
#

# List all one time availabilities in the database
GET           /api/onetimeavailabilites                                          controllers.OneTimeAvailabilityController.listOneTimeAvailabilities()

# List all one time availabilities in a time range
GET           /api/onetimeavailabilites?start=TIMESTART&end=TIMEEND              controllers.OneTimeAvailabilityController.readOneTimeAvailabilitiesByTimeRange()

# Create a one time availability
POST          /api/onetimeavailabilites                                          controllers.OneTimeAvailabilityController.createOneTimeAvailability()

# Read a one time availability by oneTimeAvailabilityId
GET           /api/onetimeavailabilites/:oneTimeAvailabilityId                   controllers.OneTimeAvailabilityController.retrieveOneTimeAvailability(oneTimeAvailabilityId: Integer)

# Delete a one time availability by oneTimeAvailabilityId
DELETE        /api/onetimeavailabilites/:oneTimeAvailabilityId                   controllers.OneTimeAvailabilityController.deleteOneTimeAvailability(oneTimeAvailabilityId: Integer)


#
# DbOneTimeUnavailability
#

# List all one time unavailabilities in the database
GET           /api/onetimeunavailabilites                                        controllers.OneTimeUnavailabilityController.listOneTimeUnavailabilities()

# List all one time unavailabilities in a time range
GET           /api/onetimeunavailabilites?start=TIMESTART&end=TIMEEND            controllers.OneTimeUnavailabilityController.readOneTimeUnavailabilitiesByTimeRange()

# Create a one time unavailability
POST          /api/onetimeunavailabilites                                        controllers.OneTimeUnavailabilityController.createOneTimeUnavailability()

# Read one time unavailability by oneTimeUnavailabilityId
GET           /api/onetimeunavailabilites/:oneTimeUnavailabilityId               controllers.OneTimeUnavailabilityController.retrieveOneTimeUnavailability(oneTimeUnavailabilityId: Integer)

# Delete one time unavailability by oneTimeUnavailabilityId
DELETE        /api/onetimeunavailabilites/:oneTimeUnavailabilityId               controllers.OneTimeUnavailabilityController.deleteOneTimeUnavailability(oneTimeUnavailabilityId: Integer)


#
# DbRecurringAvailability
#

# List all recurring availabilities
GET           /api/recurringavailabilites                                        controllers.RecurringAvailabilityController.listRecurringAvailabilities()

# List all recurring availabilities in a time range
GET           /api/recurringavailabilites?start=TIMESTART&end=TIMEEND            controllers.RecurringAvailabilityController.readRecurringAvailabilitiesByTimeRange()

# Create a recurring availability
POST          /api/recurringavailabilites                                        controllers.RecurringAvailabilityController.createRecurringAvailability()

# Read recurring availability by recurringAvailabilityId
GET           /api/recurringavailabilites/:recurringAvailabilityId               controllers.RecurringAvailabilityController.retrieveRecurringAvailability(recurringAvailabilityId: Integer)

# Delete recurring availability by recurringAvailabilityId
DELETE        /api/recurringavailabilites/:recurringAvailabilityId               controllers.RecurringAvailabilityController.deleteRecurringAvailability(recurringAvailabilityId: Integer)


