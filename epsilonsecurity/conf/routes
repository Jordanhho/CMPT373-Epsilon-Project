# allow requests for static assets
GET           /assets/*file                                              controllers.Assets.versioned(path="/public", file: Asset)

# redirect all other requests to the SPA page
# ...except API requests with the prefix '/api'
GET 					/$p<(?!api).*>														controllers.FrontController.index(p: String)

# TODO: All API endpoints need to be like '/api/user'.
# Or we could create our own custom router and use it
# for any requests with the prefix '/api'. This might 
# be the better long-term solution.
# see: https://www.playframework.com/documentation/2.6.x/ScalaRouting#the-routes-file-syntax

# ----------------------- USER APIs ----------------------

#
# DbUser
#

# List DbUsers
GET           /api/user                                                  controllers.UserController.listUsers()

# Create a DbUser
POST          /api/user                                                  controllers.UserController.createUser()

# Read DbUser by sfuEmail
GET           /api/user/:sfuEmail                           controllers.UserController.retrieveUser(sfuEmail: String)

# Update DbUser by sfuEmail
PUT           /api/user/:sfuEmail                                        controllers.UserController.updateUser(sfuEmail: String)

# Delete DbUser by sfuEmail
DELETE        /api/user                                                  controllers.UserController.deleteUser()


#
# DbUserShift
#

# List DbUserShifts
GET           /api/user/shift                                            controllers.UserShiftController.listUserShifts()

# Create a DbUserShift
POST          /api/user/shift                                            controllers.UserShiftController.createUserShift()

# Read DbUserShift by userId
GET           /api/user/shift/:userId                                    controllers.UserShiftController.retrieveUserShift(userId: Integer)

# Delete DbUserShift by userId
DELETE        /api/user/shift                                            controllers.UserShiftController.deleteUserShift()


#
# DbUserTeam
#

# List DbUserTeams
GET           /api/user/team                                             controllers.UserTeamController.listUserTeams()

# Create a DbUserTeam
POST          /api/user/team                                             controllers.UserTeamController.createUserTeam()

# Read DbUserTeam by userId and teamId
GET           /api/user/team/:userId/:teamId                             controllers.UserTeamController.retrieveUserTeam(userId: Integer, teamId: Integer)

# Delete DbUserTeam by userId and teamId
DELETE        /api/user/team                                             controllers.UserTeamController.deleteUserTeam()


#
# DbShiftName
#

# Create a DbShiftName
POST          /api/user/shift/name                                       controllers.ShiftNameController.createShiftName()

# Delete DbShiftName by shiftName
DELETE        /api/user/shift/name                                       controllers.ShiftNameController.deleteShiftName()


#
# DbTeam
#

# List DbTeams
GET           /api/team                                                  controllers.TeamController.listTeams()

# Create a DbTeam
POST          /api/team                                                  controllers.TeamController.createTeam()

# Read DbTeam by teamName
GET           /api/team/:teamName                                        controllers.TeamController.retrieveTeamByName(teamName: String)

# Delete DbTeam by teamName
DELETE        /api/team                                                  controllers.TeamController.deleteTeamByName()


#
# DbShift
#

# List DbShifts for a specific user
GET           /api/shift/:teamId/:timeStart/:timeEnd                     controllers.ShiftController.readUsersAvailableForShift(teamId: Integer, timeStart: Integer, timeEnd: Integer)

# Create a DbShift
POST          /api/shift                                                 controllers.ShiftController.createShift()

# Read DbShift by shiftName
GET           /api/shift/:shiftName                                      controllers.ShiftController.retrieveShift(shiftName: String)

# Delete a DbShift
DELETE        /api/shift                                                 controllers.ShiftController.deleteShift()


#
# DbPermission
#

# List DbPermissions
GET           /api/permission                                            controllers.PermissionController.listPermissions()

# Create a DbPermission
POST          /api/permission                                            controllers.PermissionController.createPermission()

# Read DbPermission by permissionId
GET           /api/permission/:permissionId                              controllers.PermissionController.retrievePermission(permissionId: Integer)

# Delete DbPermission by permissionId
DELETE        /api/permission                                            controllers.PermissionController.deletePermission()


#
# DbRole
#

# List DbRoles
GET           /api/role                                                  controllers.RoleController.listRoles()

# Create a DbRole
POST          /api/role                                                  controllers.RoleController.createRole()

# Read DbRole by roleId
GET           /api/role/:roleId                                          controllers.RoleController.retrieveRole(roleId: Integer)

# Delete DbRole by roleId
DELETE        /api/role                                                  controllers.RoleController.deleteRole()


#
# DbRolePermission
#

# List DbRolePermissions
GET           /api/role/permission                                       controllers.RolePermissionController.listRolePermissions()

# Create a DbRolePermission
POST          /api/role/permission                                       controllers.RolePermissionController.createRolePermission()

# Read DbRolePermission by rolePermissionId
GET           /api/role/permission/:rolePermissionId                     controllers.RolePermissionController.retrieveRolePermission(rolePermissionId: Integer)

# Delete DbRolePermission by rolePermissionId
DELETE        /api/role/permission                                       controllers.RolePermissionController.deleteRolePermission()


#
# DbOneTimeAvailability
#

# List DbOneTimeAvailabilities
GET           /api/onetimeavailability                                   controllers.OneTimeAvailabilityController.listOneTimeAvailabilities()

# List all DbOneTimeAvailability in a time range
GET           /api/onetimeavailability/:startTime/:endTime               controllers.OneTimeAvailabilityController.readOneTimeAvailabilitiesByTimeRange(startTime: Integer, endTime: Integer)

# Create a DbOneTimeAvailability
POST          /api/onetimeavailability                                   controllers.OneTimeAvailabilityController.createOneTimeAvailability()

# Read DbOneTimeAvailability by oneTimeAvailabilityId
GET           /api/onetimeavailability/:oneTimeAvailabilityId            controllers.OneTimeAvailabilityController.retrieveOneTimeAvailability(oneTimeAvailabilityId: Integer)

# Delete DbOneTimeAvailability by oneTimeAvailabilityId
DELETE        /api/onetimeavailability                                   controllers.OneTimeAvailabilityController.deleteOneTimeAvailability()


#
# DbOneTimeUnavailability
#

# List DbOneTimeUnavailabilities
GET           /api/onetimeunavailability                                 controllers.OneTimeUnavailabilityController.listOneTimeUnavailabilities()

# List all DbOneTimeUnavailability in a time range
GET           /api/onetimeunavailability/:startTime/:endTime             controllers.OneTimeUnavailabilityController.readOneTimeUnavailabilitiesByTimeRange(startTime: Integer, endTime: Integer)

# Create a DbOneTimeUnavailability
POST          /api/onetimeunavailability                                 controllers.OneTimeUnavailabilityController.createOneTimeUnavailability()

# Read DbOneTimeUnavailability by oneTimeUnavailabilityId
GET           /api/onetimeunavailability/:oneTimeUnavailabilityId        controllers.OneTimeUnavailabilityController.retrieveOneTimeUnavailability(oneTimeUnavailabilityId: Integer)

# Delete DbOneTimeUnavailability by oneTimeUnavailabilityId
DELETE        /api/onetimeunavailability                                 controllers.OneTimeUnavailabilityController.deleteOneTimeUnavailability()


#
# DbRecurringAvailability
#

# List DbRecurringAvailabilities
GET           /api/recurringavailability                                 controllers.RecurringAvailabilityController.listRecurringAvailabilities()

# List all DbRecurringAvailability in a time range
GET           /api/recurringavailability/:startTime/:endTime             controllers.RecurringAvailabilityController.readRecurringAvailabilitiesByTimeRange(startTime: Integer, endTime: Integer)

# Create a DbRecurringAvailability
POST          /api/recurringavailability                                 controllers.RecurringAvailabilityController.createRecurringAvailability()

# Read DbRecurringAvailability by recurringAvailabilityId
GET           /api/recurringavailability/:recurringAvailabilityId        controllers.RecurringAvailabilityController.retrieveRecurringAvailability(recurringAvailabilityId: Integer)

# Delete DbRecurringAvailability by recurringAvailabilityId
DELETE        /api/recurringavailability                                 controllers.RecurringAvailabilityController.deleteRecurringAvailability()


